#include <iostream>
#include <string>
#include <deque>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <map>
#include <set>
#include <queue>
#include <fstream>
#include <stack>
#include <cmath>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <random>
#include <array>
#include <chrono>
#include <functional>
#include <numeric>
#include <complex>
using namespace std;

#define ll long long
#define ld long double
#define ull unsigned ll

#define forn(i, n) for (ll i = 1; i <= n; i++)
#define dforn(i, a, b) for (ll i = a; i <= b; i++) 
#define rforn(i, n) for (ll i = n; i >= 1; i--)
#define rdforn(i, a, b) for (ll i = b; i >= a; i--)
#define sforn(i, a, b, s) for (ll i = a; i <= b; i += s)
#define aforn(v, a) for (auto& v : a)

const int mod = 1e9 + 7;
const ld pi = acos(-1);
const ll N = 1e4 + 100;
const ll inf = 1e16 + 1;
const ld dinf = 1e15;
const double eps = 1e-8;

ll gcd(ll a, ll b) {
    if (a == 0 || b == 0) {
        return a + b;
    }
    while (a % b != 0 && b % a != 0) {
        if (a > b)
            a %= b;
        else
            b %= a;
    }
    return min(a, b);
}

void solve() {
    ll n, m, k;
    cin >> n >> m >> k;
    vector<pair<ll, ll>> vec(m + 1);
    vector<vector<ll>> kek(n + 1), kekinv(n + 1);
    forn(i, m) {
        ll u, v;
        cin >> u >> v;
        vec[i] = { u, v };
        kek[u].push_back(v);
        kekinv[v].push_back(u);
    }
    vector<ll> ord, used(n + 1);
    function<void(ll)> dfs1 = [&](ll v) {
        if (used[v]) {
            return;
        }
        used[v] = 1;
        aforn(to, kek[v]) {
            dfs1(to);
        }
        ord.push_back(v);
    };
    forn(i, n) {
        if (!used[i]) {
            dfs1(i);
        }
    }
    used.assign(n + 1, 0);
    vector<vector<ll>> comp;
    vector<ll> sgn(n + 1);
    while (ord.size()) {
        ll h = ord.back();
        ord.pop_back();
        if (used[h]) {
            continue;
        }
        comp.push_back(vector<ll>());
        function<void(ll)> dfs2 = [&](ll v) {
            if (used[v]) {
                return;
            }
            used[v] = 1;
            comp.back().push_back(v);
            aforn(to, kekinv[v]) {
                dfs2(to);
            }
        };
        dfs2(h);
        aforn(v, comp.back()) {
            sgn[v] = comp.size() - 1;
        }
    }
    kek.assign(n + 1, vector<ll>());
    forn(i, m) {
        ll u = vec[i].first, v = vec[i].second;
        if (sgn[u] == sgn[v]) {
            kek[u].push_back(v);
        }
    }
    vector<ll> color(n + 1);
    used.assign(n + 1, 0);
    function<bool(ll, vector<ll>&)> dfs3 = [&](ll v, vector<ll>& path) {
        if (used[v] == 1) {
            return true;
        }
        if (used[v] == 2) {
            return false;
        }
        used[v] = 1;
        path.push_back(v);
        aforn(to, kek[v]) {
            bool f = dfs3(to, path);
            if (f) {
                return true;
            }
        }
        path.pop_back();
        used[v] = 2;
        return false;
    };
    function<bool(ll, ll)> dfs4 = [&](ll v, ll p) {
        aforn(to, kek[v]) {
            if (color[to] == -1) {
                color[to] = (color[v] + 1) % p;
                bool f = dfs4(to, p);
                if (!f) {
                    return false;
                }
            }
            else if (color[to] != (color[v] + 1) % p) {
                return false;
            }
        }
        return true;
    };
    vector<ll> d(n + 1, -1);
    function<void(ll, ll&)> dfs5 = [&](ll v, ll& g) {
        aforn(to, kek[v]) {
            if (d[to] == -1) {
                d[to] = d[v] + 1;
                dfs5(to, g);
            }
            else {
                g = gcd(g, abs(d[to] - d[v] - 1));
            }
        }
    };
    ll ans = 0;
    aforn(v, comp) {
        ll h = v[0];
        vector<ll> path;
        bool f = dfs3(h, path); 
        if (!f) {
            continue;
        }
        ll g = 0;
        d[h] = 0;
        dfs5(h, g);
        aforn(vert, v) {
            color[vert] = -1;
        }
        color[h] = 0;
        dfs4(h, g);
        map<ll, ll> mp;
        aforn(vert, v) {
            mp[color[vert]]++;
        }
        if (k % g == 0) {
            aforn(v, mp) {
                ans += v.second * (v.second - 1) / 2;
                ans += v.second;
            }
        }
        else if (g % 2 == 0 && k % g == g / 2) {
            aforn(v, mp) {
                if (v.first >= g / 2) {
                    break;
                }
                if (mp.count(v.first + g / 2)) {
                    ans += v.second * mp[v.first + g / 2];
                }
            }
        }
    }
    cout << ans << '\n';
}

int main()
{
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int t = 1;
    //cin >> t;
    while (t--) solve();
    return 0;
}