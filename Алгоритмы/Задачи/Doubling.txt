#include <iostream>
#include <string>
#include <deque>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <map>
#include <set>
#include <queue>
#include <fstream>
#include <stack>
#include <cmath>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <random>
#include <array>
#include <chrono>
#include <functional>
#include <numeric>
#include <complex>
using namespace std;
 
#define ll long long
#define ld long double
#define ull uint64_t
#define pll pair<ll, ll>
#define pii pair<int, int>
#define pli pair<ll, int>
#define plli pair<pll, int>
#define pld pair<ld, ld>
#define fst first
#define snd second
 
#define forn(i, n) for (int i = 1; i <= n; i++)
#define dforn(i, a, b) for (int i = a; i <= b; i++) 
#define rforn(i, n) for (int i = n; i >= 1; i--)
#define rdforn(i, a, b) for (int i = b; i >= a; i--)
#define sforn(i, a, b, s) for (ll i = a; i <= b; i += s)
#define aforn(v, a) for (auto& v : a)
#define sz(a) ((int)a.size())
 
const int mod = 998244353;
const ld pi = acos(-1);
const ll N = 1 << 18;
const ll inf = 1e17;
const int iinf = 1 << 30;
const ld dinf = 1e14;
const double eps = 1e-8;
 
ll bpow(ll n, ll a) { return n == 0 ? 1 : n & 1 ? a * bpow(n - 1, a) % mod : bpow(n >> 1, a * a % mod); }
 
vector<ll> pol(N), root(N), inv(N);
 
void NTT(vector<ll>& a, int n, bool f = true) {
    int i, j, k, m, u, v, w, wm;
    for (i = n >> 1, j = 1, k; j < n - 1; j++) {
        if (i > j) swap(a[i], a[j]);
        for (k = n >> 1; k <= i; k >>= 1) i ^= k; i ^= k;
    }
    for (m = 2; m <= n; m <<= 1)
        for (i = 0, wm = bpow(f ? (mod - 1) / m : (mod - 1) / m * (m - 1), 3); i < n; i += m)
            for (j = i, w = 1; j < i + (m >> 1); j++) {
                u = a[j], v = a[j + (m >> 1)] * w % mod;
                a[j] = ((ll)u + v) % mod;
                a[j + (m >> 1)] = ((ll)u + mod - v) % mod;
                w = (ll)w * wm % mod;
            }
    if (!f) for (w = bpow(mod - 2, n), i = 0; i < n; i++) (a[i] *= w) %= mod;
}
void get_inv(vector<ll>& a, vector<ll>& b, int n) {
    b[0] = bpow(mod - 2, a[0]), b[1] = 0;
    vector<ll> c(N);
    for (int m = 2; m <= n; m <<= 1) {
        dforn(i, 0, m - 1) c[i] = a[i];
        dforn(i, m, 2 * m - 1) c[i] = b[i] = 0;
        NTT(c, 2 * m), NTT(b, 2 * m);
        dforn(i, 0, 2 * m - 1) b[i] = b[i] * ((2 - b[i] * c[i] % mod + mod) % mod) % mod;
        NTT(b, 2 * m, false);
        dforn(i, m, 2 * m - 1) b[i] = 0;
    }
}
 
void get_sqrt(vector<ll>& a, vector<ll>& b, int n) {
    b[0] = 1, b[1] = 0;
    vector<ll> c(N), ib(N);
    for (int m = 2; m <= n; m <<= 1) {
        dforn(i, 0, m - 1) c[i] = a[i];
        dforn(i, m, 2 * m - 1) c[i] = b[i] = 0;
        get_inv(b, ib, m);
        NTT(c, 2 * m), NTT(b, 2 * m); NTT(ib, 2 * m);
        dforn(i, 0, 2 * m - 1) b[i] = (b[i] + ib[i] * c[i] % mod) % mod * ((mod + 1) / 2) % mod;
        NTT(b, 2 * m, false);
        dforn(i, m, 2 * m - 1) b[i] = 0;
    }
}
 
void solve() {
    int n, m;
    cin >> n >> m;
    forn(i, n) {
        int x;
        cin >> x;
        if (x <= m) pol[x] = mod - 4;
    }
    pol[0] = 1;
    int s = 1;
    while (s <= m) s <<= 1;
    get_sqrt(pol, root, s);
    root[0]++;
    get_inv(root, inv, s);
    forn(i, m) cout << inv[i] * 2 % mod << '\n';
    cout << '\n';
}
 
int main()
{
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int t = 1;
    //cin >> t;
    while (t--) solve();
    return 0;
}