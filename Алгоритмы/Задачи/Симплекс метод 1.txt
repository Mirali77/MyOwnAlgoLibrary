#include <iostream>
#include <string>
#include <deque>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <map>
#include <set>
#include <queue>
#include <fstream>
#include <stack>
#include <cmath>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <random>
#include <array>
#include <chrono>
#include <functional>
#include <numeric>
#include <complex>

using namespace std;

#define ll long long
#define ld long double
#define ull uint64_t
#define pll pair<ll, ll>
#define pii pair<int, int>
#define pli pair<ll, int>
#define plli pair<pll, int>
#define pld pair<ld, ld>
#define fst first
#define snd second
#define pdi pair<ld, int>
#define pdd pair<double, double>

#define forn(i, n) for (int i = 1; i <= n; i++)
#define dforn(i, a, b) for (int i = a; i <= b; i++) 
#define rforn(i, n) for (int i = n; i >= 1; i--)
#define rdforn(i, a, b) for (int i = b; i >= a; i--)
#define sforn(i, a, b, s) for (int i = a; i <= b; i += s)
#define aforn(v, a) for (auto& v : a)
#define sz(a) ((int)a.size())

const int mod = 1e9 + 7;
const ld pi = acos(-1);
const ll N = 1e6;
const ll inf = 4e18;
const int iinf = 1 << 28;
const ld dinf = 1e10;
const double eps = 1e-12;

struct SimplexMethod {
	int n, s, cs = 0;
	vector<pair<vector<int>, int>> constraints;
	vector<vector<double>> tab;
	vector<int> basis;
	SimplexMethod(int sn) : n(sn), s(sn) {}
	void add_constraint(vector<int>& constraint, int& lim) {
		constraints.push_back({constraint, lim}); s++, cs++;
	};
	void init(vector<int>& func) {
		tab.resize(cs + 1, vector<double>(s + 1));
		basis.resize(cs);
		dforn(i, 0, cs - 1) {
			basis[i] = n + i;
			dforn(j, 0, sz(constraints[i].fst) - 1) {
				tab[i][j] = constraints[i].fst[j];
			}
			tab[i].back() = constraints[i].snd;
			tab[i][n + i] = 1;
		}
		dforn(i, 0, sz(func) - 1) {
			tab.back()[i] = -func[i];
		}
	}
	pair<int, int> find_opt() {
		int j = min_element(tab.back().begin(), tab.back().end() - 1) - tab.back().begin();
		if (tab.back()[j] >= 0) return { -1, -1 };
		double mn = -1, best = -1;
		dforn(i, 0, cs - 1) {
			if (tab[i][j] == 0) continue;
			double k = tab[i].back() / tab[i][j]; if (k == 0 && tab[i][j] < 0) continue;
			if (k >= 0 && (mn == -1 || k < mn || k == mn && basis[best] > basis[i])) mn = k, best = i;
		}
		if (best == -1) return { -1, -1 };
		return { best, j };
	}
	void upd(pair<int, int>& p) {
		basis[p.fst] = p.snd;
		int ri = p.fst, rj = p.snd; double k = tab[ri][rj];
		dforn(j, 0, s) tab[ri][j] /= k;
		dforn(i, 0, cs) {
			if (i == ri) continue;
			k = tab[i][rj];
			dforn(j, 0, s) tab[i][j] -= tab[ri][j] * k;
		}
	}
	double maximize(vector<int>& func) {
		init(func);
		pair<int, int> p;
		double last = 0;
		while ((p = find_opt()).fst != -1) {
			upd(p);
		}
		return tab.back().back();
	}
};

void solve() {
	int n, m;
	cin >> n >> m;
	vector<vector<int>> constraints(m + n, vector<int>(n));
	vector<int> func(n);
	dforn(i, 0, n - 1) {
		int l, r, v;
		cin >> l >> r >> v;
		func[i] = v;
		dforn(j, l, r - 1) constraints[j][i] = 1;
		constraints[m + i][i] = 1;
	}
	SimplexMethod simp(n);
	dforn(i, 0, m - 1) {
		int lim;
		cin >> lim;
		simp.add_constraint(constraints[i], lim);
	}
	dforn(i, 0, n - 1) {
		int lim = 1; simp.add_constraint(constraints[m + i], lim);
	}
	int ans = round(simp.maximize(func));
	cout << ans << '\n';
}

int main()
{
	ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	int t = 1;
	cin >> t;
	while (t--) solve();
	return 0;
}