#include <iostream>
#include <string>
#include <deque>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <map>
#include <set>
#include <queue>
#include <fstream>
#include <stack>
#include <cmath>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <random>
#include <array>
#include <chrono>
#include <functional>
#include <numeric>
#include <complex>
using namespace std;

#define ll long long
#define ld long double
#define ull unsigned ll

#define forn(i, n) for (ll i = 1; i <= n; i++)
#define dforn(i, a, b) for (ll i = a; i <= b; i++) 
#define rforn(i, n) for (int i = n; i >= 1; i--)
#define rdforn(i, a, b) for (int i = b; i >= a; i--)
#define sforn(i, a, b, s) for (ll i = a; i <= b; i += s)
#define aforn(v, a) for (auto& v : a)

const int mod = 998244353;
const ld pi = acos(-1);
const ll N = 1e5 + 1;
const ll inf = 1e17;
const int iinf = 1 << 30;
const ld dinf = 1e15;
const double eps = 1e-10;

struct AhoCorasick {
	struct Vert {
		map<int, int> nxt, go;
		bool leaf;
		int fa, fa_val, link;
		Vert(int fa = -1, int fa_val = -1, int link = -1) : fa(fa), fa_val(fa_val), link(link), leaf(false) {};
	};
	vector<Vert> t;
	AhoCorasick() {
		t.push_back(Vert());
	}
	void add(vector<int>& v) {
		int pos = 0;
		aforn(g, v) {
			if (!t[pos].nxt.count(g)) {
				t.push_back(Vert(pos, g));
				t[pos].nxt[g] = t.size() - 1;
			}
			pos = t[pos].nxt[g];
		}
		t[pos].leaf = true;
	}
	int go(int v, int val);
	int get_link(int v) {
		if (t[v].link == -1) {
			if (v == 0 || t[v].fa == 0) {
				t[v].link = 0;
			}
			else {
				t[v].link = go(get_link(t[v].fa), t[v].fa_val);
			}
		}
		return t[v].link;
	}
	bool search(vector<int>& v) {
		int pos = 0;
		aforn(g, v) {
			pos = go(pos, g);
			if (t[pos].leaf) {
				return true;
			}
		}
		return false;
	}
};
int AhoCorasick::go(int v, int val) {
	if (!t[v].go.count(val)) {
		if (t[v].nxt.count(val)) {
			t[v].go[val] = t[v].nxt[val];
		}
		else {
			t[v].go[val] = v == 0 ? 0 : go(get_link(v), val);
		}
	}
	return t[v].go[val];
}

struct Node {
	vector<int> psys;
	AhoCorasick sys;
	Node() {};
	Node(int ind, vector<vector<int>>& paths) {
		psys.push_back(ind);
		sys.add(paths[ind]);
	}
};
void merge(Node& n1, Node& n2, vector<vector<int>>& paths) {
	Node res;
	aforn(v, n1.psys) {
		res.psys.push_back(v);
		res.sys.add(paths[v]);
	}
	aforn(v, n2.psys) {
		res.psys.push_back(v);
		res.sys.add(paths[v]);
	}
	n1 = res;
}

void solve() {
	int n, m;
	cin >> n >> m;
	vector<vector<int>> kek_in(n + 1);
	forn(i, m) {
		int u, v;
		cin >> u >> v;
		kek_in[v].push_back(u);
	}
	int k;
	cin >> k;
	vector<vector<int>> paths(k + 1);
	vector<int> p(k + 1);
	forn(i, k) {
		int l;
		cin >> l;
		forn(j, l) {
			int x;
			cin >> x;
			paths[i].push_back(x);
		}
	}
	iota(p.begin() + 1, p.end(), 1);
	sort(p.begin() + 1, p.end(), [&](int x, int y) {return paths[x].size() < paths[y].size(); });
	map<int, Node> mp;
	vector<vector<int>> kek_paths(n + 1);
	forn(i, k) {
		bool f = true;
		aforn(v, mp) {
			if (v.second.sys.search(paths[p[i]])) {
				f = false;
				break;
			}
		}
		if (!f) {
			continue;
		}
		Node nd(p[i], paths);
		int cur = 0;
		while (mp.count(cur)) {
			map<int, Node>::iterator it = mp.find(cur);
			merge(nd, it->second, paths);
			cur++;
			mp.erase(it);
		}
		mp[cur] = nd;
		kek_paths[paths[p[i]].back()].push_back(p[i]);
	}
	map<pair<ll, ll>, ll> hsh_buf;
	ll hp1 = 105227, hp2 = 106699;
	vector<ll> dp(n + 1), del(k + 1);
	dp[1] = 1;
	dforn(i, 2, n) {
		aforn(from, kek_in[i]) {
			(dp[i] += dp[from]) %= mod;
		}
		aforn(v, kek_paths[i]) {
			(del[v] += dp[paths[v][0]]) %= mod;
			ll hsh1 = 0, hsh2 = 0;
			dforn(i, 0, paths[v].size() - 1) {
				hsh1 = (hsh1 * hp1 % mod + paths[v][i]) % mod;
				hsh2 = (hsh2 * hp2 % mod + paths[v][i]) % mod;
				if (i > 0 && hsh_buf.count({ hsh1, hsh2 })) {
					(del[v] += mod - hsh_buf[{hsh1, hsh2}]) %= mod;
				}
			}
		}
		aforn(v, kek_paths[i]) {
			(dp[i] += mod - del[v]) %= mod;
			ll hsh1 = 0, pw1 = 1, hsh2 = 0, pw2 = 1;
			rdforn(i, 0, paths[v].size() - 1) {
				(hsh1 += pw1 * paths[v][i] % mod) %= mod;
				(pw1 *= hp1) %= mod;
				(hsh2 += pw2 * paths[v][i] % mod) %= mod;
				(pw2 *= hp2) %= mod;
				if (i < paths[v].size() - 1) {
					(hsh_buf[{hsh1, hsh2}] += del[v]) %= mod;
				}
			}
		}
		cout << dp[i] << " ";
	}
	cout << '\n';
}

int main()
{
	ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	int t = 1;
	//cin >> t;
	while (t--) solve();
	return 0;
}