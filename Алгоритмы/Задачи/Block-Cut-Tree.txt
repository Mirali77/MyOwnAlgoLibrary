#include <iostream>
#include <string>
#include <deque>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <map>
#include <set>
#include <queue>
#include <fstream>
#include <stack>
#include <cmath>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <random>
#include <array>
#include <chrono>
#include <functional>
#include <numeric>
#include <complex>
using namespace std;

#define ll long long
#define ld long double
#define ull unsigned ll

#define forn(i, n) for (ll i = 1; i <= n; i++)
#define dforn(i, a, b) for (ll i = a; i <= b; i++) 
#define rforn(i, n) for (ll i = n; i >= 1; i--)
#define rdforn(i, a, b) for (ll i = b; i >= a; i--)
#define sforn(i, a, b, s) for (ll i = a; i <= b; i += s)
#define aforn(v, a) for (auto& v : a)

const int mod = 1e9 + 7;
const ld pi = acos(-1);
const ll N = 1e6 + 1;
const ll inf = 1e16 + 1;
const ld dinf = 1e15;
const double eps = 1e-8;

void solve() {
    ll n, m;
    cin >> n >> m;
    vector<vector<ll>> kek(n + 1), wkek(n + 1);
    forn(i, m) {
        ll u, v;
        cin >> u >> v;
        kek[u].push_back(v);
        kek[v].push_back(u);
    }
    ll time = 0;
    vector<ll> tmr(n + 1), up(n + 1), used(n + 1), path, fa(n + 1);
    function<void(ll, ll)> dfs1 = [&](ll v, ll from) {
        used[v] = 1;
        tmr[v] = up[v] = time++;
        fa[v] = from;
        path.push_back(v);
        aforn(to, kek[v]) {
            if (to == from) {
                continue;
            }
            if (used[to]) {
                up[v] = min(up[v], tmr[to]);
            }
            else {
                dfs1(to, v);
                if (up[to] >= tmr[v]) {
                    wkek.push_back(vector<ll>());
                    while (true) {
                        ll h = path.back();
                        wkek[h].push_back(wkek.size() - 1);
                        wkek.back().push_back(h);
                        path.pop_back();
                        if (fa[h] == v) {
                            break;
                        }
                    }
                    wkek[v].push_back(wkek.size() - 1);
                    wkek.back().push_back(v);
                }
                else {
                    up[v] = min(up[v], up[to]);
                }
            }
        }
    };
    dfs1(1, 0);
    wkek.push_back(vector<ll>());
    while (path.size()) {
        ll h = path.back();
        wkek[h].push_back(wkek.size() - 1);
        wkek.back().push_back(h);
        path.pop_back();
    }
    vector<ll> sz(wkek.size()), tmin(wkek.size()), tmout(wkek.size());
    fa.clear();
    fa.resize(wkek.size());
    time = 0;
    function<void(ll, ll)> dfs2 = [&](ll v, ll from) {
        sz[v] = (v <= n);
        tmin[v] = tmout[v] = time++;
        fa[v] = from;
        aforn(to, wkek[v]) {
            if (to == from) {
                continue;
            }
            dfs2(to, v);
            sz[v] += sz[to];
            tmout[v] = max(tmout[v], tmout[to]);
        }
    };
    dfs2(1, 0);
    auto is_anc = [&](ll a, ll b) {
        return tmin[a] <= tmin[b] && tmout[b] <= tmout[a];
    };
    forn(i, wkek.size() - 1) {
        sort(wkek[i].begin(), wkek[i].end(), [&](ll x, ll y) {return tmin[x] <= tmin[y]; });
    }
    ll q;
    cin >> q;
    while (q--) {
        ll a, b;
        cin >> a >> b;
        if (is_anc(b, a)) {
            swap(a, b);
        }
        ll ans = n - sz[b] + 1;
        if (is_anc(a, b)) {
            ll l = 0, r = wkek[a].size();
            while (r - l > 1) {
                ll m = (l + r) >> 1;
                if (tmin[wkek[a][m]] <= tmin[b]) {
                    l = m;
                }
                else {
                    r = m;
                }
            }
            ans -= n - sz[wkek[a][l]] - 1;
        }
        else {
            ans -= sz[a] - 1;
        }
        cout << ans << '\n';
    }
}

int main()
{
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int t = 1;
    cin >> t;
    while (t--) solve();
    return 0;
}