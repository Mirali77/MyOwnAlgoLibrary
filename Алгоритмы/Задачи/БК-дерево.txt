#include <iostream>
#include <string>
#include <deque>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <map>
#include <set>
#include <queue>
#include <fstream>
#include <stack>
#include <cmath>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <random>
#include <array>
#include <chrono>
#include <functional>
#include <numeric>
#include <complex>
using namespace std;

#define ll long long
#define ld long double
#define ull uint64_t
#define pll pair<ll, ll>
#define pii pair<int, int>
#define pli pair<ll, int>
#define plli pair<pll, int>
#define pld pair<ld, ld>
#define fst first
#define snd second

#define forn(i, n) for (int i = 1; i <= n; i++)
#define dforn(i, a, b) for (int i = a; i <= b; i++) 
#define rforn(i, n) for (int i = n; i >= 1; i--)
#define rdforn(i, a, b) for (int i = b; i >= a; i--)
#define sforn(i, a, b, s) for (ll i = a; i <= b; i += s)
#define aforn(v, a) for (auto& v : a)
#define sz(a) ((int)a.size())

const int mod = 1e9 + 7;
const ld pi = acos(-1);
const ll N = 2e6;
const ll inf = 1e17;
const int iinf = 1 << 28;
const ld dinf = 1e14;
const double eps = 1e-8;

struct BKTree {
    vector<int> t;
    vector<vector<int>> states;
    int dist(int x, int y) {
        return bitset<30>(x ^ y).count();
    };
    void add(int x) {
        if (t.empty()) {
            t.push_back(x);
            states.push_back(vector<int>(31, -1));
            return;
        }
        int rt = 0, d;
        for (d = dist(t[rt], x); states[rt][d] != -1; ) {
            rt = states[rt][d];
            d = dist(t[rt], x);
        }
        if (d == 0) return;
        t.push_back(x);
        states.push_back(vector<int>(31, -1));
        states[rt][d] = sz(t) - 1;
    }
    void search(int pos, int x, int& lim) {
        if (pos == -1) return;
        int d = dist(t[pos], x);
        lim = min(lim, d);
        int start = d - lim / 5;
        dforn(to, start, min(30, d + lim / 5)) {
            search(states[pos][to], x, lim);
        }
    }
};

void solve() {
    int n, k;
    cin >> n >> k;
    BKTree Tr;
    int res = iinf;
    forn(i, n) {
        int x = 0, cur = inf;
        dforn(j, 0, k - 1) { char v; cin >> v; x += (1 << j) * (v - '0'); }
        if (i > 1) Tr.search(0, x, cur), res = min(res, cur);
        Tr.add(x);
    }
    cout << res << '\n';
}

int main()
{
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int t = 1;
    //cin >> t;
    while (t--) solve();
    return 0;
}