#include <iostream>
#include <string>
#include <deque>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <map>
#include <set>
#include <queue>
#include <fstream>
#include <stack>
#include <cmath>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <random>
#include <array>
#include <chrono>
#include <functional>
#include <numeric>
#include <complex>
using namespace std;

#define ll long long
#define ld long double
#define ull unsigned ll

#define forn(i, n) for (ll i = 1; i <= n; i++)
#define dforn(i, a, b) for (ll i = a; i <= b; i++) 
#define rforn(i, n) for (ll i = n; i >= 1; i--)
#define rdforn(i, a, b) for (ll i = b; i >= a; i--)
#define sforn(i, a, b, s) for (ll i = a; i <= b; i += s)
#define aforn(v, a) for (auto& v : a)

const int mod = 998244353;
const ld pi = acos(-1);
const ll N = 1e6 + 1;
const ll inf = 1e16 + 1;
const ld dinf = 1e15;
const double eps = 1e-8;

using cd = complex<double>;

int rev(ll num, ll lg_n) {
    ll res = 0;
    dforn(i, 0, lg_n - 1) {
        if (num & (1LL << i))
            res |= 1LL << (lg_n - 1 - i);
    }
    return res;
}

void fft(vector<cd> &a, bool invert) {
    ll n = a.size();
    ll lg_n = 0;
    while ((1LL << lg_n) < n)
        lg_n++;

    for (int i = 0; i < n; i++) {
        if (i < rev(i, lg_n))
            swap(a[i], a[rev(i, lg_n)]);
    }

    for (int len = 2; len <= n; len <<= 1) {
        double ang = 2 * pi / len * (invert ? -1 : 1);
        cd wlen(cos(ang), sin(ang));
        for (int i = 0; i < n; i += len) {
            cd w(1);
            for (int j = 0; j < len / 2; j++) {
                cd u = a[i + j], v = a[i + j + len / 2] * w;
                a[i + j] = u + v;
                a[i + j + len / 2] = u - v;
                w *= wlen;
            }
        }
    }

    if (invert) {
        for (cd& x : a)
            x /= n;
    }
}

vector<ll> convolution(vector<ll> const& a, vector<ll> const& b) {
    vector<cd> fa(a.begin(), a.end()), fb(b.begin(), b.end());
    int n = 1;
    ll p = a.size() + b.size();
    p = min(p, N);
    while (n < p)
        n <<= 1;
    fa.resize(n);
    fb.resize(n);
    fft(fa, false);
    fft(fb, false);
    for (int i = 0; i < n; i++)
        fa[i] *= fb[i];
    fft(fa, true);
    vector<ll> result(n);
    for (int i = 0; i < n; i++) {
        result[i] = round(fa[i].real());
        if (result[i]) {
            result[i] = 1;
        }
    }
    while (result.size() > 1 && result.back() == 0) {
        result.pop_back();
    }
    return result;
}

vector<ll> id(1, 1);

vector<ll> binpow(ll n, vector<ll> a) {
    if (n == 0) {
        return id;
    }
    if (n & 1) {
        return convolution(a, binpow(n - 1, a));
    }
    return binpow(n / 2, convolution(a, a));
}

void solve() {
    ll n, k;
    cin >> n >> k;
    vector<ll> a(1001);
    forn(i, n) {
        ll x;
        cin >> x;
        a[x] = 1;
    }
    vector<ll> res = binpow(k, a);
    dforn(i, 0, res.size() - 1) {
        if (res[i]) {
            cout << i << " ";
        }
    }
    cout << '\n';
}

int main()
{
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int t = 1;
    //cin >> t;
    while (t--) solve();
    return 0;
}